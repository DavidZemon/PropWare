/**
@mainpage PropWare v2.0 Documentation - Nightly
@htmlonly

<script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.js"></script>
<script type="text/javascript" src="http://code.jquery.com/ui/1.10.4/jquery-ui.js"></script>
<script type="text/javascript">
    function showAll() {
        $(".windoze").show();
        $(".debian").show();
        $(".mac").show();
        $(".os_independent").show();
    }

    function hideAll() {
        $(".windoze").hide();
        $(".debian").hide();
        $(".mac").hide();
        $(".os_independent").hide();
    }

    function toggleStuffs() {
        var selectBox = document.getElementsByName("os_select").item(0);
        var selection = selectBox.options[selectBox.selectedIndex].value;

        if ('all' == selection) {
            showAll();
        } else {
            hideAll();
            if ('none' != selection) {
                $("." + selection).show();
                $(".os_independent").show();
            }
        }
    }
</script>

<p>
    Download PropWare <a href="https://github.com/SwimDude0614/PropWare"
                         target="_blank">here</a>.
</p>

<h2>Contents</h2>
<ol>
    <li>
        <a href="#gettingStarted">Getting Started</a>
        <ol>
            <li><a href="#getStart_PreReq">Prerequisites</a></li>
            <li><a href="#getStart_BuildLib">Building the PropWare Static Libraries</a></li>
            <li><a href="#getStart_Deploy">Deploying a PropWare Application</a></li>
        </ol>
    </li>

    <li>
        <a href="#contribute">Developing and Contributing to PropWare</a>
    </li>

    <li>
        <a href="#usefulLinks">Useful Links</a>
    </li>
</ol>

<h2 id="gettingStarted">Getting Started</h2>

<h3 id="getStart_PreReq">Prerequisites</h3>

<ul>
    <li>
        <label>Select your operating system: <select onchange="toggleStuffs()" name="os_select">
            <option selected value="none"></option>

            <option value="windoze">Windows</option>

            <option value="debian">Debian Linux (Ubuntu)</option>

            <option value="mac">Mac OS X</option>

            <!--<option value="all">Show all</option>-->
        </select> </label>
    </li>

    <!-- GCC -->
    <li class="windoze">PropGCC, a specially ported version of the GNU C compiler (GCC) for the Parallax Propeller, is
        the compiler of choice. I find the easiest way to install it is via Parallax's <a
                target="_blank"
                href="http://learn.parallax.com/propeller-c-set-simpleide/windows">Simple IDE</a>. If you prefer, you
        can also download PropGCC directly from <a target="_blank"
                                                   href="https://code.google.com/p/propgcc/downloads/list">here</a>.
    </li>

    <li class="debian">PropGCC, a specially ported version of the GNU C compiler (GCC) for the Parallax Propeller, is
        the compiler of choice. I find the easiest way to install it is via Parallax's <a
                target="_blank"
                href="http://learn.parallax.com/propeller-c-set-simpleide/linux">Simple IDE</a>. If you prefer, you can
        also download PropGCC directly from <a target="_blank" href="https://code.google.com/p/propgcc/downloads/list">here</a>.
    </li>

    <li class="mac">PropGCC, a specially ported version of the GNU C compiler (GCC) for the Parallax Propeller, is the
        compiler of choice. I find the easiest way to install it is via Parallax's <a
                target="_blank"
                href="http://learn.parallax.com/propeller-c-set-simpleide/mac">Simple IDE</a>. If you prefer, you can
        also download PropGCC directly from <a target="_blank" href="https://code.google.com/p/propgcc/downloads/list">here</a>.
    </li>

    <!-- GNU make -->
    <li class="windoze">Install GNU Make: Download and install the <a target="_blank"
                                                                      href="http://gnuwin32.sourceforge.net/downlinks/make.php">complete
        package</a>
    </li>

    <li class="debian">Install GNU Make: type "sudo apt-get install make" at the terminal</li>

    <li class="mac">Install GNU Make: You will need to install Make via Xcode on a Mac. <a
            href="https://stackoverflow.com/questions/10265742/how-to-install-make-and-gcc-on-a-mac" target="_blank">Stack
        Overflow</a> has good instructions on the topic.
    </li>

    <!-- PROP_GCC env var -->
    <li class="windoze">[Optional] Add an environment variable PROPGCC_PREFIX=&lt;propgcc root&gt;
        <ul>
            <li>Windows 2000, XP, Vista, and 7 users should see this well-written <a target="_blank"
                                                                                     href="http://www.computerhope.com/issues/ch000549.htm">tutorial</a>
                for accessing the "Environment Variables" window
            </li>

            <li>Windows 8/8.1 users can follow this <a target="_blank"
                                                       href="http://www.c-sharpcorner.com/UploadFile/6cde20/use-of-environment-variable-in-windows-8/">tutorial</a>
                with lots of pictures
            </li>

            <li>Once you have the "Environment Variables" window open, click "New..." under "System Variables" and enter
                "PROPGCC_PREFIX" as the "Variable name" and the full path to the PropGCC folder as the "Variable value".
                For example, if you installed PropGCC via SimpleIDE, your PropGCC path is likely to be "C:\Program Files
                (x86)\SimpleIDE\propeller-gcc"
            </li>

            <li>Note: If you skip this step, you'll need to set PROPGCC_PREFIX in all makefiles used by Propeller
                applications
            </li>
        </ul>
    </li>

    <li class="debian">[Optional] Add a root environment variable PROPGCC_PREFIX=&lt;propgcc root&gt;
        <ol>
            <li>Enter "gksudo gedit /etc/environment" at the terminal</li>

            <li>Append a new line to the bottom of the file with the full path to the PropGCC folder. For example, if
                you are using GCC bundled with Simple IDE and you ran the setup script (setup.sh) in the Simple IDE
                folder, then PropGCC would have been installed to /opt/parallax and you would append the line
                "PROPGCC_PREFIX=/opt/parallax" (no spaces!)
            </li>

            <li>Save and exit the text editor</li>
        </ol>
        <ul>
            <li>Note: Creating an environment variable at the root level is only necessary if you plan on using a
                graphical IDE such as Eclipse; If you are compiling source from the terminal you should edit ~/.bashrc
                instead of /etc/environment
            </li>

            <li>Note: If you skip this step, you'll need to set PROPGCC_PREFIX in all makefiles used by Propeller
                applications
            </li>
        </ul>
    </li>

    <li class="mac">
        [Optional] Add a root environment variable PROPGCC_PREFIX=&lt;propgcc root&gt;
        <ul>
            <li>
                I'm afraid I don't know anyone with a Mac to try this on, and I'm not 100% confident this works, but <a
                    target="_blank"
                    href="https://stackoverflow.com/questions/5240628/how-to-set-environment-variable-for-root-user">here's
                a link</a> that might help you. If you have trouble with building your projects via Eclipse or any
                application not launched from the terminal, please let me know and I'll work with you to solve it
            </li>

            <li>Once you determine the correct file to edit, append a new line to the bottom with the full path to the
                PropGCC folder. For example, if you are using GCC bundled with Simple IDE and Simple IDE was extracted
                to /home/joe/SimpleIDE-0-9-45, then you would append the line
                "PROPGCC_PREFIX=/home/joe/SimpleIDE-0-9-45/parallax" (no spaces!)
            </li>

            <li>Note: If you skip this step, you'll need to set PROPGCC_PREFIX in all makefiles used by Propeller
                applications
            </li>
        </ul>
    </li>

    <!-- PROPWARE_PATH env var -->
    <li class="os_independent">[Optional] Add another environment variable PROPWARE_PATH=&lt;PropWare root&gt;
        <ul>
            <li>Detailed instructions for creating environment variables can be found in the step above</li>

            <li>Note: If you skip this step, you'll need to set PROPWARE_PATH in all makefiles used by PropWare
                applications
            </li>
        </ul>
    </li>
</ul>

<h3 id="getStart_BuildLib">Building the PropWare Static Libraries</h3>

<ul>
    <li>Enter the PropWare root directory at the command line</li>

    <li>Run "make"; This will build the library file, libPropWare_*.a, for each memory model as well as executables for
        each example project
    </li>
</ul>

<h3 id="getStart_Deploy">Deploying a PropWare application</h3>

<p>PropWare makes building and running applications very easy. Below are three different methods for building and
    deploying a PropGCC application using PropWare.</p>

<ul>
    <!-- Eclipse -->
    <li>From Eclipse (recommended):
        <ol>
            <li>If you have Eclipse, ensure the C/C++ Developer Tools (CDT) plugin is installed; For new Eclipse users,
                find "Eclipse IDE for C/C++ Developers" <a target="_blank"
                                                           href="http://www.eclipse.org/downloads/">here</a> and
                download the appropriate package
            </li>

            <li>Create a new C or C++ project; "Project Type" should be Executable -&gt; Empty Project and "Toolchains"
                should be set for cross compiler; On second page, select "Advanced settings..."
            </li>

            <li>In the left-pane, click on "C/C++ Build" menu option to the left and then find the "Builder Settings"
                tab
            </li>

            <li>Uncheck "Use default build command" and ensure the "Build command" text box reads "make -f ../Makefile"
            </li>

            <li>In the left-pane, expand the "C/C++ Build" menu and select "Settings"</li>

            <li>In the "Tool Settings" tab, find "Cross GCC Compiler" and then "Includes" beneath that. Add two lines to
                "Include paths (-l)", one should be the path to PropWare, and another should be the path to PropGCC's
                include folder (on Linux, /opt/parallax/propeller-elf/include)
                <ul>
                    <li>This is done simply for the indexer that helps you keep track of included files - it will not
                        affect the build process and can be skipped (not recommended)
                    </li>
                </ul>
            </li>

            <li>With the include paths set, you are done modifying settings and can click "OK" on the current dialogue
                and then "Next &gt;" and "Finish" on the other
            </li>

            <li>Create your files based on the same rules as "At the Terminal" (steps 1 and 2) and add source and header
                files where appropriate
            </li>

            <li>That's it! You now have Eclipse up and running with PropGCC and PropWare! All of its auto-completion,
                code highlighting, and quick and easy compilation! Projects can be compiled with Eclipse's built-in
                "Build Project" found in the "Project" menu. Though you can load your program to the Propeller via some
                Eclipse magic, I find it's a lot more trouble than it's worth. Simply open a terminal, navigate to &lt;project
                root&gt;/Debug and type either "make -f ../Makefile run" to test your application in RAM or "make -f
                ../Makefile install" to load your application to EEPROM
            </li>
        </ol>
    </li>

    <!-- Terminal -->
    <li>At the Terminal:
        <ol>
            <li>Create a project directory and your source files
                <ul>
                    <li>All C/C++ files must have an accompanying header file with a similar name; (i.e., if you have a
                        file main.c, you must have main.h as well); You are welcome to edit common.mk to not search for
                        header files; See the comment near the top of the file for my reasoning behind including it and
                        decide for yourself
                    </li>
                </ul>
            </li>

            <li>Create a Makefile for your project, following the template set under the Examples directory</li>

            <li>Create a "Debug" folder in the project directory and run "make -f ../Makefile" within it
                <ul>
                    <li>This Debug folder allows for seamless Eclipse integration; If you are certain you do not want to
                        use Eclipse, you can run make wherever you choose. The remaining steps assume you are running
                        from within the Debug directory
                    </li>
                </ul>
            </li>

            <li>The "run" target for make will load your executable into the Propeller's RAM and begin running the
                application: "make -f ../Makefile run"
            </li>

            <li>When you are ready to install the program to the Propeller's EEPROM, the "install" target will load your
                executable into both EEPROM and RAM and then begin execution: "make -f ../Makefile install"
            </li>
        </ol>
    </li>

    <!-- Importing Examples -->
    <li>Importing Example Projects into Eclipse:
        <ol>
            <li>All example projects can be imported into Eclipse simultaneously. You will need Eclipse and the CDT
                plugin as described in "From Eclipse" step 1.
            </li>

            <li>In the "File" menu of Eclipse, select "Import..."; Under "General", you should find "Existing Projects
                into Workspace"; Press "Next &gt;"
            </li>

            <li>In "Select root directory:", enter (or browse to) the Examples directory in PropWare
                <ul>
                    <li>[Optional] After the projects appear in the "Projects:" windows, you can deselect any that you
                        don't want imported
                    </li>
                </ul>
            </li>

            <li>Under "Options", ensure that "Copy projects into workspace" is selected and press "Finish" to close the
                dialogue
                <ul>
                    <li>[Optional] You can unselect "Copy projects into workspace" if you do not wish to make copies of
                        all project files into the Eclipse workspace folder; This is only recommended if you will never
                        make modifications to the example files
                    </li>
                </ul>
            </li>

            <li>Two minor modifications need to be made to the project settings; These modifications are detailed in
                steps 3 through 7 of "From Eclipse" above
            </li>
        </ol>
    </li>
</ul>

<h2 id="contribute">Developing and Contributing to PropWare</h2>
<p>PropWare is developed by David Zemon.</p>
<p>Contributions can be made by either <a target="_blank" href="http://david.zemon.name/professional/contact.shtml">
contacting David Zemon</a> or forking the repository and creating a pull request.</p>

<h2 id="usefulLinks">Useful links</h2>

<ul>
    <li><a target="_blank" href="https://github.com/SwimDude0614/PropWare">PropWare source code</a>
    </li>

    <li>Parallax forums can be found <a
            href="http://forums.parallax.com/forumdisplay.php/65-Propeller-1-Multicore-Microcontroller"
            target="_blank"> here</a>
    </li>

    <li><a target="_blank" href="http://learn.parallax.com/node/640">Simple IDE</a>: Light-weight IDE for Parallax
        Propeller
    </li>

    <li><a target="_blank" href="https://code.google.com/p/propgcc/">PropGCC</a>: GCC compiler for Parallax Propeller
    </li>

    <li><a href="http://obex.parallax.com/" target="_blank">OBEX</a>: Parallax Object Exchange
    </li>

    <li><a target="_blank" href="https://code.google.com/p/lib-propelleruino/">libpropelleruino</a>: Arduino-compatible
        source for the Propeller
    </li>

    <li><a target="_blank" href="https://github.com/libpropeller/libpropeller">libpropeller</a>: C++ Propeller GCC
        objects
    </li>
</ul>

<script type="text/javascript">
    hideAll();
</script>

@endhtmlonly */
